# -*- coding: utf-8 -*-
# -----------------------------------------------------------------------------
# Copyright 2019 by Shabanipy Authors, see AUTHORS for more details.
#
# Distributed under the terms of the MIT license.
#
# The full license is in the file LICENCE, distributed with this software.
# -----------------------------------------------------------------------------
"""Utility window to manually fit a WAL trace.

"""
import os
import sys
from cmath import sqrt

import matplotlib.pyplot as plt
import numpy as np
from numba import njit
import scipy.constants as cs
from scipy.signal import savgol_filter
from atom.api import Atom, Float, Int
from enaml.layout.api import hbox, vbox
from enaml.widgets.api import (Window, MPLCanvas, Container, FileDialogEx,
                               PushButton, ToolBar, Action, Field, Form,
                               Slider, Label, GroupBox, ObjectCombo)
from enaml.layout.api import hbox, grid, align, spacer
from enaml.stdlib.slider_transform import FloatTransform
from enaml.stdlib.fields import FloatField, IntField

from shabanipy.quantum_hall.conversion\
    import convert_lock_in_meas_to_diff_res
from shabanipy.quantum_hall.density import extract_density
from shabanipy.quantum_hall.mobility import extract_mobility
from shabanipy.quantum_hall.wal.wal_no_dresselhaus\
    import compute_wal_conductance_difference
from shabanipy.quantum_hall.wal.fitting import (extract_soi_from_wal,
                                                estimate_parameters)
from shabanipy.quantum_hall.wal.utils import (flip_field_axis,
                                              recenter_wal_data,
                                              symmetrize_wal_data,
                                              compute_linear_soi,
                                              compute_dephasing_time)
from shabanipy.labber import LabberData



#: Path to the datafile to use by default.
FILE = (r'D:\Matthieu\JS138_124HB_BM003_004.hdf5')


enamldef FloatSlider(Container): fs:
    """Slider used to edit floating point values.

    """
    #: Object on which the attribute to edit is defined.
    attr model

    #: Label to use for the widget
    alias label : lb.text

    #: Name of the attribute to edit
    attr attr_name

    #: Range that can be explored around the current value of the parameter.
    attr value_range

    # Event emitted each time the user change the value
    event value_changed

    constraints = [hbox(lb, fi, sl, va), align('v_center', lb, fi)]

    Label: lb:
        pass

    FloatField: fi:
        hug_width = 'strong'
        value = getattr(model, attr_name)
        value ::
            va.value = change['value']
            setattr(model, attr_name, change['value'])
            fs.value_changed = True

    Slider: sl:
        FloatTransform:
            value << fi.value
            value::
                va.value = change['value']
                setattr(model, attr_name, change['value'])
                fs.value_changed = True
            minimum << min(fi.value - value_range[0], 0)
            maximum << fi.value + value_range[1]
            precision = 1000

    FloatField: va:
        read_only = True
        value = fi.value


class SimplifiedWALModel(Atom):
    """Atom class for the simplified WAL model

    """
    #: Dephasing field in mT
    dephasing = Float(0.3)

    #: Rashba field in mT
    rashba = Float(0.1)

    #: Cubid Dresselhaus field in mT
    cubic = Float(5)

    #: Number of Landau levels to consider in the sum
    truncation = Int(1000)


enamldef SimplifiedWALModelView(GroupBox): wal:
    """View to edit the parameters of an RC line model.

    """
    attr wal_model = SimplifiedWALModel()

    event model_changed

    FloatSlider:
        model = wal_model
        label = 'Dephasing (mT)'
        attr_name = 'dephasing'
        value_range << (0.1, 50)
        value_changed ::
            wal.model_changed = True

    FloatSlider:
        model = wal_model
        label = 'Rashba'
        attr_name = 'rashba'
        value_range << (0.1, 50)
        value_changed ::
           wal.model_changed = True

    FloatSlider:
        model = wal_model
        label = 'Cubic'
        attr_name = 'cubic'
        value_range << (0.1, 100)
        value_changed ::
            wal.model_changed = True

    Label:
        text = 'Landau levels'

    IntField:
        value := wal_model.truncation
        value ::
            wal.model_changed = True


enamldef Main(Window): main:
    """Main window.

    """
    #: Path to the file in which the data we are studying are stored
    attr _path

    #: Magnetic field corresponding to the loaded trace
    attr _field

    #: Variation of the conductance
    attr _dsigma

    #: Model data which should be plotted on top of the data
    attr _model_data

    #: Matplotlib figure
    attr _fig

    #: Gate values at which WAL traces have been acquired
    attr _gates

    #: Matplotlib plots of the model
    attr _lines = ()

    attr ref_field = 0.0002

    title = 'Explore simple WAL model'

    initialized ::
        if os.path.isfile(FILE):
            self._path = FILE
            load_gates(FILE)

    func load_gates(path):

        with LabberData(path) as data:
            self._gates = np.unique(data.get_data(1))
            gsel.selected = np.max(self._gates)
            load_data(gsel.selected)

    func load_data(gate):
        """Load experimental data and display them.

        """
        with LabberData(_path) as data:
            field = data.get_data(0, filters={1: gate})
            curr = data.get_data(2, filters={1: gate})
            res = convert_lock_in_meas_to_diff_res(curr, 1e-6)

        # Start with smoothing the data if we were asked to and recentering
        # the data in field.
        flip_field_axis(field, res)
        res = savgol_filter(res, 31, 3)

        # Filter twice when determining the field offset.
        field, _ = recenter_wal_data(field,
                                    savgol_filter(res, 31, 3),
                                    0.1, 10)

        field, res = symmetrize_wal_data(field, res, 'average')

        # Express the conductance in term of the quantum of conductance.
        sigma = (1/res) / (cs.e**2/(2*np.pi*cs.Planck))

        # Conserve only the data for positive field since we symmetrized the
        # data
        mask = np.where(np.logical_and(np.greater(field, 0),
                                       np.less(field, 0.1)))
        f, s = field[mask], sigma[mask]

        # Find the conductance at the reference field and compute Δσ
        ref_ind = np.argmin(np.abs(f - ref_field))
        reference_field = f[ref_ind]
        dsigma = s - s[ref_ind]

        self._field = f
        self._dsigma = dsigma

        main._fig = fig = plt.figure(0)
        fig.clf()
        main._lines = ()
        fig.gca().plot(f, dsigma, '+')
        fig.gca().set_ylim(1.2*np.min(dsigma), 1.2*np.max(dsigma))
        recompute_model()

    func recompute_model():
        """Recompute the model admittance and update the plots.

        """
        if _field is None:
            return
        wm = model.wal_model
        ds = compute_wal_conductance_difference(_field,
                                                wm.dephasing*1e-3,
                                                wm.rashba*1e-3,
                                                wm.cubic*1e-3,
                                                ref_field,
                                                wm.truncation)
        for l in _lines:
            l.remove()
        l1, = _fig.gca().plot(_field, ds)
        main._lines = (l1, )
        mpl.figure = plt.figure(1)
        mpl.figure = _fig

    Container:

        constraints = [hbox(vbox(sel, hbox(lab, gsel), model, spacer), mpl)]

        PushButton: sel:
            text = 'Select data'
            clicked::
                path = FileDialogEx.get_open_file_name(main)
                if path:
                    main._path = path
                    load_gates(path)

        Label: lab:
            text = 'Gate voltage'

        ObjectCombo: gsel:
            items << list(_gates)
            selected::
                load_data(change['value'])

        SimplifiedWALModelView: model:
            title = 'Model parameters'
            model_changed ::
                recompute_model()

        MPLCanvas: mpl:
            toolbar_visible = True
